#include <iostream>

const int MAX_SIZE = 100;

class Stack {
private:
    char data[MAX_SIZE];
    int top;

public:
    Stack() : top(-1) {}

    void push(char element) {
        if (top < MAX_SIZE - 1) {
            data[++top] = element;
        } else {
            std::cerr << "Stack overflow!" << std::endl;
        }
    }

    char pop() {
        if (top >= 0) {
            return data[top--];
        } else {
            std::cerr << "Stack underflow!" << std::endl;
            return '\0';
        }
    }

    bool isEmpty() const {
        return top == -1;
    }
};

bool isWellParenthesized(const std::string& expression) {
    Stack charStack;

    for (char c : expression) {
        if (c == '(' || c == '{' || c == '[') {
            charStack.push(c);
        } else if (c == ')' || c == '}' || c == ']') {
            if (charStack.isEmpty()) {
                return false; // Closing delimiter without a corresponding opening delimiter
            }

            char top = charStack.pop();

            if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                return false; // Mismatched delimiters
            }
        }
    }

    return charStack.isEmpty(); // Stack should be empty for a well-parenthesized expression
}

int main() {
    std::string expression;

    std::cout << "Enter an expression: ";
    std::getline(std::cin, expression);

    if (isWellParenthesized(expression)) {
        std::cout << "The expression is well-parenthesized." << std::endl;
    } else {
        std::cout << "The expression is not well-parenthesized." << std::endl;
    }

    return 0;
}
